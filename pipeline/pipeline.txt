@Library('LibrarySystem') _
pipeline {
    agent any

    environment {
        DOCKER_IMAGE_TAG = "v${BUILD_ID}" // Tag for Docker image using Jenkins build ID
        DOCKER_REGISTRY = 'https://index.docker.io/v1/' // Docker registry URL
        REPO_URL = 'https://github.com/Itsyehia/Library-System---Banque-Misr.git' // Git repository URL
        AWS_REGION = 'us-west-2' // AWS region
        CLUSTER_NAME = 'Team3-cluster' // EKS cluster name
        scannerHome = tool 'SonarQubeScanner' // SonarQube scanner tool configured in Jenkins
    }

    stages {
        stage('Clean Workspace') {
            steps {
                script {
                    deleteDir() // Deletes all files in the workspace
                }
            }
        }
        
        stage('Clone Repository') {
            steps {
                script {
                    // Clone the Git repository based on OS
                    if (isUnix()) {
                        sh 'git clone https://github.com/Itsyehia/Library-System---Banque-Misr.git'
                    } else {
                        bat 'git clone https://github.com/Itsyehia/Library-System---Banque-Misr.git'
                    }
                }
            }
        }

        stage('SonarQube Analysis') {
            environment {
                scannerHome = tool 'SonarQubeScanner' // SonarQube scanner tool in Jenkins
            }
            steps {
                withSonarQubeEnv('SonarQube') { // Use SonarQube environment configured in Jenkins
                    script {
                        // Run SonarQube analysis with credentials
                        withCredentials([string(credentialsId: 'sonarqube-token', variable: 'SONAR_TOKEN')]) {
                            if (isUnix()) {
                                sh "${scannerHome}/bin/sonar-scanner -Dsonar.projectKey=LibrarySystem -Dsonar.sources=./Library-System---Banque-Misr -Dsonar.login=${SONAR_TOKEN}"
                            } else {
                                bat "${scannerHome}\\bin\\sonar-scanner -Dsonar.projectKey=LibrarySystem -Dsonar.sources=./Library-System---Banque-Misr -Dsonar.login=${SONAR_TOKEN}"
                            }
                        }
                    }
                }
            }
        }

        stage('Quality Gate') {
            steps {
                timeout(time: 1, unit: 'MINUTES') {
                    waitForQualityGate abortPipeline: true // Wait for SonarQube quality gate result
                }
            }
        }
        
        stage('Trivy Scan') {
            steps {
                script {
                // Install the latest version of Trivy CLI
                sh '''
                curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- latest
                '''
  
                // Run Trivy scan and save the report in JSON format
                sh '''
                trivy image --no-progress --format json --output trivy-report.json reemwaleed/new-deployment-image:v4.0
                '''

                // Archive the Trivy report as an artifact
                archiveArtifacts artifacts: 'trivy-report.json', allowEmptyArchive: true
                    }
                }
        }

        stage('Docker Login') {
            steps {
                script {
                    // Login to Docker registry
                    withCredentials([usernamePassword(credentialsId: 'docker_account', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                        sh '''
                            docker logout || true
                            echo ${DOCKER_PASSWORD} | docker login ${DOCKER_REGISTRY} -u ${DOCKER_USERNAME} --password-stdin
                        '''
                    }
                }
            }
        }
        
        stage('Docker Build and Push') {
            steps {
                script {
                    // Build and push Docker image
                    dockerOperations.BuildAndPush('Library-System---Banque-Misr/app', "${DOCKER_IMAGE_TAG}")
                }
            }
        }

        stage('Generate Deployment YAML') {
            steps {
                script {
                    // Generate deployment YAML files with the new Docker image tag
                    def filePath = 'Library-System---Banque-Misr/Library-System---Banque-Misr/flask_postgres'
                    dockerOperations.generateDeploymentYAML("${DOCKER_IMAGE_TAG}", filePath)
                }
            }
        }

        stage('AWS Login and Configure EKS') {
            steps {
                script {
                    // Login to AWS and configure kubectl to use the EKS cluster
                    withCredentials([aws(credentialsId: 'aws_credentials', accessKeyVariable: 'AWS_ACCESS_KEY_ID', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY')]) {
                        sh 'aws sts get-caller-identity' // Verify AWS credentials
                        sh "aws eks update-kubeconfig --region us-west-2 --name Team3-cluster"
                        
                        // Apply Kubernetes configurations
                        dir('Library-System---Banque-Misr/Library-System---Banque-Misr/flask_postgres') {
                            sh '''
                                kubectl apply -f pod.yaml
                                kubectl apply -f deployment.yaml
                                kubectl apply -f service.yaml
                                kubectl get svc
                            '''
                        }
                    }
                }
            }
        }

        stage('Smoke Test') {
            steps {
                script {
                    // Perform smoke testing on the deployed service
                    withCredentials([aws(credentialsId: 'aws_credentials', accessKeyVariable: 'AWS_ACCESS_KEY_ID', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY')]) {
                        def lb_dns = ""
                        def retries = 5
                        def delay = 30 // seconds

                        // Get the load balancer DNS name
                        lb_dns = sh(script: "kubectl get svc library-json-service -o jsonpath='{.status.loadBalancer.ingress[0].hostname}'", returnStdout: true).trim()

                        retry(retries) {
                            echo "Testing server at http://${lb_dns}/landing"
                            def response = sh(script: "curl -s -o /dev/null -w \"%{http_code}\" http://${lb_dns}/landing", returnStdout: true).trim()
                            if (response != "200") {
                                error "Server not ready. Response code: ${response}"
                            } else {
                                echo "Server is running"
                            }
                        }
                    }
                }
            }
        }
    }

    post {
        always {
            cleanWs() // Always clean the workspace after the pipeline execution
        }
        success {
            echo 'Pipeline completed successfully!'
        }
        failure {
            echo 'Pipeline failed.'
        }
    }
}
